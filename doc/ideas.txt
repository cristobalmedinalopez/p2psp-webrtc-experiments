Clustering:

1. Un P se conecta a S y S decide que va a pertenecer a otro cluster
externo. Esto puede ocurrir por ejemplo, cuando el cluster ya es
demasiado grande, porque anteriormente dicho peer ha mostrado un
comportamiento poco fiable o porque está detrás de un NAT simétrico y
cada peer del cluster público, incluido el source, ve al peer P como
un punto extremo diferente. Si esto ocurre, el peer P es insolidario,
S va a recibir quejas desde puntos extremos desconocidos y no podría
eliminar a P de su lista de peers. En este caso, lo más sencillo es
colocar a P fuera de la red privada y un S dentro de la red. También
se podría aplicar en S la política de que las quejas están asociadas a
direcciones IP, no a puntos finales. En este caso, incluso un P
insolidario detrás de un NAT simétrico sería descubierto porque todas
las quejas estarían asociadas a la IP pública del NAT de P.

2. S le envía a P un bloque no exclusivo, y luego, nada más.

3. P recibe el bloque y se lo envía al resto de peers del
cluster. Esto va a provocar que la(s) entrada(s) en el NAT de P, si lo
hubiera, se creen, con lo que podrá recibir del resto de peers del
cluster, interno (no confundir con el cluster de una red privada).

4. Los peers del cluster (interno) comprueban que se trata de un
bloque repetido y marcan al P como peer externo, lo que significa que
le van a enviar los bloques sin esperar nada a cambio (no se van a
quejar a S).

Tratamiento de un peer tras un NAT simétrico:

En un NAT simétrico, cada combinación posible (end-point origen,
end-point destino) recibe una entrada diferente en la tabla NAT. Esto
provoca que cada peer, incluido el nodo fuente, vean un end-point
distinto para P, puesto que cambia el puerto público seleccionado por
el NAT.

Esto genera un problema si P es insolidario, porque las quejas de los
peers a S no van a ser idénticas (se diferencia en el puerto). Frente
a esto se pueden hacer dos cosas: (1) identificar a los peers
insolidarios mediate su dirección IP, no mediante su end-point, lo que
provocaría que en algunos casos todos los peers que están dentro de la
misma red privada fueran desconectados por la insolidaridad de uno de
ellos y (2) tratar a los peers de las redes privadas como peers
"externos" al cluster público. Un peer externo no recibe tráfico desde
el nodo fuente, sino del resto de peers del cluster público (véase
arriba un algoritmo para crear peer externos). Como un peer externo no
va a enviar tráfico hacia el cluster público (excepto al principio),
no importa que tenga asociado múltiples end-points, uno para cada peer
del cluster público (incuido S) porque jamás ninguno de ellos se va a
quejar de su posible insolidaridad. El único problema aparece cuando
se incorporan nuevos peers al cluster público porque no va a haber una
entrada en el NAT simétrico (sí en el resto de tipos de NAT) y por lo
tanto, no van a poder hacerle llegar paquetes a P. Hay dos soluciones
para esto: (1) que todos los peers utilicen el punto extremo de S como
punto extremo origen, lo que sólo va a funcionar con peers en la red
pública (los NATs van a deshacer este engaño) y (2), que cuando P
detecte que se ha perdido un paquete, solicite a S la lista de peers y
P reinicie el proceso del bloque no exclusivo a todos los peers
públicos. Esto último, presenta un coste añadido para S.

Finalmente, para lidiar con la NATs simétricos, siempre podemos echar
mano de colocar P fuera de la red privada (simétrica) y a un S dentro
de la red.

Transmutación:

Si se distribuye el código del nodo fuente y del peer en uno solo y
cuando se ejecuta, desde la línea de comandos se decide qué tipo de
nodo se desea usar, los nodos podrían transmutar, haciendo que nodos
que funcionan como peers en un momento determinado se conviertan en
sources y viceversa. Esto puede ser ventajoso para crear clústeres
privados, en redes privadas, que obtienen los datos del stream a
través de una conexión TCP entre el nodo fuente que corre dentro de la
red privada y un peer liberado (que no contribuye al cluster, no
recibe desde su source, pero recibe desde el resto de peers del
cluster). Un peer liberado se comporta, para un source, como si de un
servidor Icecast se tratase, que es capaz de servir una copia del
stream.

